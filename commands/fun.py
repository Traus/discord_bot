import asyncio
import re
from datetime import datetime, timedelta, timezone, time

import discord
import requests
from discord.ext import commands, tasks
from discord.utils import get

from commands._base_command import Command
from commands._mute_control import _add_mute
from constants import Channels, tavern_emoji, beer_emoji
from database.stat import add_value, get_value

from utils.format import box, send_by_bot, create_embed
from utils.guild_utils import get_members_by_role, get_bot_avatar, create_and_send_slap, has_immune, \
    set_permissions, get_referenced_author, is_traus, quote_referenced_message, chance, get_channel, get_role_by_name
from utils.states import table_turn_over, immune_until
from utils.tenor_gifs import find_gif
from utils.toasts import find_toast


# If no tzinfo is given then UTC is assumed.
schedule = time(hour=7, minute=0)  # UTC, 10 Msk


def get_next_day_in_seconds() -> int:
    today = datetime.utcnow()
    next_date = datetime.combine(today, schedule)
    if today > next_date:
        next_date += timedelta(days=1)
    return (datetime.utcnow() - next_date).seconds


class FunCommands(Command, name='–í–µ—Å–µ–ª—å–µ'):
    """–†–æ—Ñ–ª—ã –∏ –ø–∞—Å—Ö–∞–ª–∫–∏"""

    def __init__(self, bot):
        super().__init__(bot)
        # self.send_daily_toast.start()

    @commands.Cog.listener()
    async def on_ready(self):
        await self.bot.wait_until_ready()  # Make sure your guild cache is ready so the channel can be found via get_channel
        while True:
            next_iteration = get_next_day_in_seconds()
            await asyncio.sleep(next_iteration)

            toast = find_toast()
            channel = get_channel(channel_id=Channels.GUILD)
            tot = get_role_by_name(name="ToT")
            msg = f'{tot.mention}\n{toast}!\n–î–∞–≤–∞–π—Ç–µ –∂–µ –ø–æ–¥–Ω–∏–º–µ–º –Ω–∞—à–∏ –±–æ–∫–∞–ª—ã –≤ —ç—Ç–æ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å!'
            await channel.send(box(msg))

    @commands.command(name='–æ—Å—É–∂–¥–∞—é', help='–û—Å—É–¥–∏—Ç—å!')
    async def blame(self, ctx):
        message = await quote_referenced_message(ctx)
        await send_by_bot(ctx, message, file=discord.File('files/media/tom.jpg'), delete=True)

    @commands.command(name='–æ–¥–æ–±—Ä—è—é', help='–û–¥–æ–±—Ä–∏—Ç—å!')
    async def approve(self, ctx):
        message = await quote_referenced_message(ctx)
        search_term = 'approve'
        limit = 10
        await send_by_bot(ctx, message, find_gif(search_term, limit), delete=True)

    @commands.command(name='—à–∞–ø–∞–ª–∞—Ö', help='–í—Ç–∞—â–∏—Ç—å')
    async def slap(self, ctx, members: commands.Greedy[discord.Member], bot: str = None):
        await ctx.message.delete()

        from_bot = bot is not None and bot == 'bot'
        if not members:
            author = await get_referenced_author(ctx)
            if author is not None:
                members = [author]
            else:
                members = [ctx.author]

        for member in set(members):
            avatar_from = ctx.author.avatar_url
            avatar_to = member.avatar_url

            # check immune
            if has_immune(member) and not from_bot:
                stamp = immune_until[member]
                imune = stamp - datetime.timestamp(datetime.now())
                await ctx.send(box(f'–£ {member.display_name} –∏–º–º—É–Ω–∏—Ç–µ—Ç –Ω–∞ {int(imune//60) + 1} –º–∏–Ω—É—Ç!'))
                continue

            # chance to dodge
            dodge = chance(5)
            if dodge:
                await ctx.send(box(f'–°—É–ø–µ—Ä—É–∫–ª–æ–Ω —É {member.display_name}!'))
                stamp = datetime.timestamp(datetime.now()) + 5*60
                immune_until[member] = stamp
                continue

            if from_bot:
                avatar_from = get_bot_avatar()

            gif = is_traus(ctx.author) or chance(5)
            add_value('slap')

            # check every 100 slap
            if not (get_value('slap') % 100):
                text = f"{ctx.author.mention} —É–ª—å—Ç—É–µ—Ç –ø–æ {member.mention}!"
                embed = create_embed(description=text,
                                     image=find_gif(search_term='super slap', limit=1))
                await ctx.send(embed=embed, reference=ctx.message.reference)
                continue

            # check 10000 slap temp bullshit
            if get_value('slap') == 10000:
                text = f"{ctx.author.mention} –≤—ã–¥–∞–µ—Ç —Å—É–ø–µ—Ä —ç–ø–∏—á–µ—Å–∫–∏–π —à–∞–ø–∞–ª–∞—Ö –ø–æ {member.mention} " \
                       f"–∏ –≤—ã—à–∏–±–∞–µ—Ç {member.mention} –∏–∑ –¢–∞–≤–µ—Ä–Ω—ã"
                embed = create_embed(description=text,
                                     image=find_gif(search_term='super punch', limit=1))
                await ctx.send(embed=embed, reference=ctx.message.reference)
                await ctx.send(f"{member.display_name} :regional_indicator_f:")
                await _add_mute(member, 2*60)
                continue
            await create_and_send_slap(ctx, avatar_from, avatar_to, gif=gif, from_bot=from_bot)

    @commands.command(name='–∞–≤–∞—Ç–∞—Ä', help='–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É')
    async def avatar(self, ctx, member: discord.Member = None):
        await ctx.message.delete()

        if member is None:
            member = ctx.author
        await ctx.send(member.avatar_url)

    @commands.command(name='—Å–µ–∫—Ç–∞', help='—Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ–∫—Ç—ã –∫—Ä–æ–≤–∞–≤–æ–π –ú–µ—Ä–∏')
    async def sekta(self, ctx):
        sekta = get_members_by_role(name='–°–µ–∫—Ç–∞–Ω—Ç')

        msg = ''
        for role in [sekta]:
            members = role.members
            if members:
                m = '\n'.join([role.members[i].display_name for i in range(len(role.members))])
                msg += f"{role.role}:\n{m}\n"
        await ctx.send(box(msg))

    @commands.command(name='–≤—Å–µ–∫—Ç—É', help='–ø—Ä–∏–Ω—è—Ç—å –≤ —Å–µ–∫—Ç—É –±–µ—Å–ø—Ä–µ–¥–µ–ª–∞')
    async def join_sekta(self, ctx, member: discord.Member = None):
        if member is None:
            member = ctx.author
        all_roles = ctx.guild.roles
        sekta = get(all_roles, name='–°–µ–∫—Ç–∞–Ω—Ç')
        if is_traus(member):
            return
        await ctx.send(box(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–∫—Ç—É, {member.display_name}!'))
        await set_permissions(Channels.SEKTA, member, read_messages=True, send_messages=True)
        await member.add_roles(sekta)

    @commands.command(name='–∏–∑—Å–µ–∫—Ç—ã', help='–≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–π –∫—Ä–∏–ø–æ–≤–æ–π —Å–µ–∫—Ç—ã')
    async def exit_sekta(self, ctx):
        all_roles = ctx.guild.roles
        sekta = get(all_roles, name='–°–µ–∫—Ç–∞–Ω—Ç')
        if sekta in ctx.author.roles:
            await ctx.author.remove_roles(sekta)
            await send_by_bot(ctx, file=discord.File('files/media/sekta.jpg'), delete=True)
            await set_permissions(Channels.SEKTA, ctx.author, send_messages=False)

    @commands.command(help='ToT')
    async def tavern(self, ctx):
        msg = await send_by_bot(ctx, tavern_emoji, delete=True)
        for emoji in ('üá¥', 'üá´', 'üáπ', 'üá¶', 'üá±', 'üá™', 'üá∏'):
            await msg.add_reaction(emoji)

    @commands.command(name='—Ç–æ–∫—Å–∏–∫', help='—Ñ—É, —Ç–æ–∫—Å–∏–∫')
    async def toxic(self, ctx):
        message = await quote_referenced_message(ctx)
        toxic_emoji = f"{tavern_emoji}    :regional_indicator_o: :regional_indicator_f:"
        msg = await send_by_bot(ctx, message, toxic_emoji, delete=True)
        for emoji in ('üáπ', 'üá¥', 'üáΩ', '‚Ñπ', 'üá®', 'üá∏', '<:emoji_99:866240571759788073>'):
            await msg.add_reaction(emoji)

    @commands.command(name='–ø–µ—Ä–µ–∏–≥—Ä–∞–ª', help='–ü–µ—Ä–µ–∏–≥—Ä–∞–ª –∏ —É–Ω–∏—á—Ç–æ–∂–∏–ª')
    async def meme_win(self, ctx, member: discord.Member = None):
        await ctx.message.delete()
        author = await get_referenced_author(ctx)
        member = member or author
        if member:
            text = f"{ctx.author.mention} –ø–µ—Ä–µ–∏–≥—Ä–∞–ª –∏ —É–Ω–∏—á—Ç–æ–∂–∏–ª {member.mention}"
            embed = create_embed(image=find_gif(search_term='–ø–µ—Ä–µ–∏–≥—Ä–∞–ª', limit=1),
                                 fields=[("–î—É–º–∞–ª–∏ —è –≤–∞—Å –Ω–µ –ø–µ—Ä–µ–∏–≥—Ä–∞—é?", text)])
            await ctx.send(embed=embed, reference=ctx.message.reference)

    @commands.command(name='–ø—è—Ç—å', help='–î–∞—Ç—å –ø—è—Ç—å')
    async def five(self, ctx, member: discord.Member = None):
        await ctx.message.delete()
        author = await get_referenced_author(ctx)
        member = member or author
        if member:
            text = f"{ctx.author.mention} –¥–∞—ë—Ç –ø—è—Ç—å {member.mention}!"
            embed = create_embed(description=text,
                                 image=find_gif(search_term='highfive', limit=50))
            await ctx.send(embed=embed, reference=ctx.message.reference)

    @commands.command(name='—á–æ–∫', help='–ß–æ–∫–Ω—É—Ç—å—Å—è')
    async def chin(self, ctx, member: discord.Member = None):
        await ctx.message.delete()
        author = await get_referenced_author(ctx)
        member = member or author
        if member:
            text = f"{ctx.author.mention} —á–æ–∫–∞–µ—Ç—Å—è —Å {member.mention}!"
            embed = create_embed(description=text,
                                 image=find_gif(search_term='cheers', limit=10))
            await ctx.send(embed=embed, reference=ctx.message.reference)

    @commands.command(name='—Ñ–∞–∫—Ç', help='—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç')
    async def fact(self, ctx):
        url = 'https://randstuff.ru/fact/'
        pattern = r'(?<=–§–∞–∫—Ç:</h1><div id="fact"><table class="text"><tr><td>).*(?=</td>)'
        resp = requests.get(url)
        text = re.findall(pattern=pattern, string=resp.content.decode('utf8'))[0]
        await send_by_bot(ctx, box(text), delete=True)

    @commands.command(help='–†–û–¶–ö!')
    async def rockon(self, ctx):
        search_term = 'rockon'
        limit = 20
        message = await quote_referenced_message(ctx, limit=50)
        await send_by_bot(ctx, message, find_gif(search_term, limit), delete=True)

    @commands.command(name='–≥–æ—Ä–∏—Ç', help='–≥–æ—Ä–∏–∏–∏–∏–∏—Ç!')
    async def fire(self, ctx):
        search_term = 'ass on fire'
        limit = 5
        message = await quote_referenced_message(ctx, limit=50)
        await send_by_bot(ctx, message, find_gif(search_term, limit), delete=True)

    @commands.command(name='–ª–æ–≥–æ', help='–ª–æ–≥–æ –≥–∏–ª—å–¥–∏–∏')
    async def logo(self, ctx):
        await ctx.send(ctx.guild.icon_url)

    @commands.command(name='–≥—Ü', help='–ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å')
    async def gc(self, ctx):
        message = await quote_referenced_message(ctx)
        await send_by_bot(ctx, message, file=discord.File('files/media/gc.png'), delete=True)

    @commands.command(name='—Å—Ç–∞—Ç', help='—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¢–∞–≤–µ—Ä–Ω–µ')
    async def stat(self, ctx, target: str = '—Ç–∞–≤–µ—Ä–Ω–∞'):
        await ctx.message.delete()
        start_time = datetime.strptime("26.04.2021", "%d.%m.%Y")
        current_time = datetime.utcnow() + timedelta(hours=3)

        beer = dict(
            names=['–ø–∏–≤–æ', 'beer', beer_emoji['beer']],
            stat_on='–ø–∏–≤—É',
            value=f"{get_value('beer')} –∫—Ä—É–∂–µ–∫ –ø–∏–≤–∞",
        )
        ale = dict(
            names=['—ç–ª—å', 'ale', beer_emoji['ale']],
            stat_on='—ç–ª—é',
            value=f"{get_value('ale')} –ª–∏—Ç—Ä–æ–≤ —ç–ª—è",
        )
        honey = dict(
            names=['–º–µ–¥–æ–≤—É—Ö–∞', 'honey', beer_emoji['honey']],
            stat_on='–º–µ–¥–æ–≤—É—Ö–µ',
            value=f"{get_value('honey')} –±–æ—á–µ–∫ –º–µ–¥–æ–≤—É—Ö–∏",
        )
        wine = dict(
            names=['–≤–∏–Ω–æ', 'wine', beer_emoji['wine']],
            stat_on='–≤–∏–Ω—É',
            value=f"{get_value('wine')} –±–æ–∫–∞–ª–æ–≤ –≤–∏–Ω–∞",
        )
        vodka = dict(
            names=['–≤–æ–¥–∫–∞', '—Å–∞–º–æ–≥–æ–Ω', 'vodka', beer_emoji['vodka']],
            stat_on='–≤–æ–¥–∫–µ',
            value=f"{get_value('vodka')} –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥–∫–∏",
        )
        slap = dict(
            names=['—à–∞–ø–∞–ª–∞—Ö', 'slap'],
            stat_on='—à–∞–ø–∞–ª–∞—Ö–∞–º',
            value=f"–í—ã–¥–∞–Ω–æ {get_value('slap')} —à–∞–ø–∞–ª–∞—Ö–æ–≤.",
        )
        tavern = dict(
            names=['—Ç–∞–≤–µ—Ä–Ω–∞'],
            stat_on='—Ç–∞–≤–µ—Ä–Ω–µ',
            value=f"–í—ã–ø–∏—Ç–æ:\n"
                  f"{beer['value']}\n"
                  f"{ale['value']}\n"
                  f"{honey['value']}\n"
                  f"{wine['value']}\n"
                  f"{vodka['value']}\n\n"
                  f"{slap['value']}"
        )

        for choice in [beer, ale, honey, wine, vodka, slap, tavern]:
            if target in choice['names']:
                msg = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {choice['stat_on']} –∑–∞ {(current_time - start_time).days} –¥–Ω–µ–π.\n" \
                      f"{choice['value']}"
                await ctx.send(box(msg))

    @commands.command(name='—Å—Ç–æ–ª', help='–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Ç–æ–ª')
    async def table(self, ctx):
        if table_turn_over[ctx.channel.id]:
            await send_by_bot(ctx, '(‚ïÆ¬∞-¬∞)‚î≥‚î≥', delete=True)
            table_turn_over[ctx.channel.id] = False
        else:
            await send_by_bot(ctx, '( ‚ïØ¬∞‚ñ°¬∞)‚ïØ‚îª‚îª', delete=True)
            table_turn_over[ctx.channel.id] = True

    @commands.command(name='—Ç–æ—Å—Ç', help='–ü–æ–≤–æ–¥ –≤—ã–ø–∏—Ç—å')
    async def toast(self, ctx):
        toast = find_toast()
        msg = f'{toast}\n–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–≤–æ–¥ –≤—ã–ø–∏—Ç—å! –ü–æ–≥–Ω–∞–ª–∏!'
        await ctx.send(box(msg))

    @tasks.loop(time=schedule)
    async def send_daily_toast(self):
        await self.bot.wait_until_ready()  # Make sure your guild cache is ready so the channel can be found via get_channel

        toast = find_toast()
        channel = get_channel(channel_id=Channels.GUILD)
        tot = get_role_by_name(name="ToT")
        msg = f'{tot.mention}\n{toast}!\n–î–∞–≤–∞–π—Ç–µ –∂–µ –ø–æ–¥–Ω–∏–º–µ–º –Ω–∞—à–∏ –±–æ–∫–∞–ª—ã –≤ —ç—Ç–æ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å!'
        await channel.send(box(msg))


def setup(bot):
    bot.add_cog(FunCommands(bot))
